//EvaluateTCPModels.cc - A part of DICOMautomaton 2017. Written by hal clark.

#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <string>    
#include <vector>
#include <set> 
#include <map>
#include <unordered_map>
#include <list>
#include <functional>
#include <thread>
#include <array>
#include <mutex>
#include <limits>
#include <cmath>
#include <regex>

#include <getopt.h>           //Needed for 'getopts' argument parsing.
#include <cstdlib>            //Needed for exit() calls.
#include <utility>            //Needed for std::pair.
#include <algorithm>
#include <experimental/optional>

#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>

#include <boost/interprocess/sync/named_mutex.hpp>
#include <boost/interprocess/sync/scoped_lock.hpp>

#include "YgorMisc.h"         //Needed for FUNCINFO, FUNCWARN, FUNCERR macros.
#include "YgorMath.h"         //Needed for vec3 class.
#include "YgorMathPlottingGnuplot.h" //Needed for YgorMathPlottingGnuplot::*.
#include "YgorMathChebyshev.h" //Needed for cheby_approx class.
#include "YgorStats.h"        //Needed for Stats:: namespace.
#include "YgorFilesDirs.h"    //Needed for Does_File_Exist_And_Can_Be_Read(...), etc..
#include "YgorContainers.h"   //Needed for bimap class.
#include "YgorPerformance.h"  //Needed for YgorPerformance_dt_from_last().
#include "YgorAlgorithms.h"   //Needed for For_Each_In_Parallel<..>(...)
#include "YgorArguments.h"    //Needed for ArgumentHandler class.
#include "YgorString.h"       //Needed for GetFirstRegex(...)
#include "YgorImages.h"
#include "YgorImagesIO.h"
#include "YgorImagesPlotting.h"

#include "Explicator.h"       //Needed for Explicator class.

#include "../Structs.h"

#include "../YgorImages_Functors/Grouping/Misc_Functors.h"

#include "../YgorImages_Functors/Processing/DCEMRI_AUC_Map.h"
#include "../YgorImages_Functors/Processing/DCEMRI_S0_Map.h"
#include "../YgorImages_Functors/Processing/DCEMRI_T1_Map.h"
#include "../YgorImages_Functors/Processing/Highlight_ROI_Voxels.h"
#include "../YgorImages_Functors/Processing/Kitchen_Sink_Analysis.h"
#include "../YgorImages_Functors/Processing/IVIMMRI_ADC_Map.h"
#include "../YgorImages_Functors/Processing/Time_Course_Slope_Map.h"
#include "../YgorImages_Functors/Processing/CT_Perfusion_Clip_Search.h"
#include "../YgorImages_Functors/Processing/CT_Perf_Pixel_Filter.h"
#include "../YgorImages_Functors/Processing/CT_Convert_NaNs_to_Air.h"
#include "../YgorImages_Functors/Processing/Min_Pixel_Value.h"
#include "../YgorImages_Functors/Processing/Max_Pixel_Value.h"
#include "../YgorImages_Functors/Processing/CT_Reasonable_HU_Window.h"
#include "../YgorImages_Functors/Processing/Slope_Difference.h"
#include "../YgorImages_Functors/Processing/Centralized_Moments.h"
#include "../YgorImages_Functors/Processing/Logarithmic_Pixel_Scale.h"
#include "../YgorImages_Functors/Processing/Per_ROI_Time_Courses.h"
#include "../YgorImages_Functors/Processing/DBSCAN_Time_Courses.h"
#include "../YgorImages_Functors/Processing/In_Image_Plane_Bilinear_Supersample.h"
#include "../YgorImages_Functors/Processing/In_Image_Plane_Bicubic_Supersample.h"
#include "../YgorImages_Functors/Processing/In_Image_Plane_Pixel_Decimate.h"
#include "../YgorImages_Functors/Processing/Cross_Second_Derivative.h"
#include "../YgorImages_Functors/Processing/Orthogonal_Slices.h"

#include "../YgorImages_Functors/Transform/DCEMRI_C_Map.h"
#include "../YgorImages_Functors/Transform/DCEMRI_Signal_Difference_C.h"
#include "../YgorImages_Functors/Transform/CT_Perfusion_Signal_Diff.h"
#include "../YgorImages_Functors/Transform/DCEMRI_S0_Map_v2.h"
#include "../YgorImages_Functors/Transform/DCEMRI_T1_Map_v2.h"
#include "../YgorImages_Functors/Transform/Pixel_Value_Histogram.h"
#include "../YgorImages_Functors/Transform/Subtract_Spatially_Overlapping_Images.h"

#include "../YgorImages_Functors/Compute/Per_ROI_Time_Courses.h"
#include "../YgorImages_Functors/Compute/Contour_Similarity.h"
#include "../YgorImages_Functors/Compute/AccumulatePixelDistributions.h"

#include "EvaluateTCPModels.h"



std::list<OperationArgDoc> OpArgDocEvaluateTCPModels(void){
    std::list<OperationArgDoc> out;


    out.emplace_back();
    out.back().name = "TCPFileName";
    out.back().desc = "A filename (or full path) in which to append SNR data generated by this routine."
                      " The format is CSV. Leave empty to dump to generate a unique temporary file.";
    out.back().default_val = "";
    out.back().expected = true;
    out.back().examples = { "", "/tmp/somefile", "localfile.csv", "derivative_data.csv" };


    out.emplace_back();
    out.back().name = "NormalizedROILabelRegex";
    out.back().desc = "A regex matching ROI labels/names to consider. The default will match"
                      " all available ROIs. Be aware that input spaces are trimmed to a single space."
                      " If your ROI name has more than two sequential spaces, use regex to avoid them."
                      " All ROIs have to match the single regex, so use the 'or' token if needed."
                      " Regex is case insensitive and uses extended POSIX syntax.";
    out.back().default_val = ".*";
    out.back().expected = true;
    out.back().examples = { ".*", ".*Body.*", "Body", "Gross_Liver",
                            R"***(.*Left.*Parotid.*|.*Right.*Parotid.*|.*Eye.*)***",
                            R"***(Left Parotid|Right Parotid)***" };


    out.emplace_back();
    out.back().name = "ROILabelRegex";
    out.back().desc = "A regex matching ROI labels/names to consider. The default will match"
                      " all available ROIs. Be aware that input spaces are trimmed to a single space."
                      " If your ROI name has more than two sequential spaces, use regex to avoid them."
                      " All ROIs have to match the single regex, so use the 'or' token if needed."
                      " Regex is case insensitive and uses extended POSIX syntax.";
    out.back().default_val = ".*";
    out.back().expected = true;
    out.back().examples = { ".*", ".*body.*", "body", "Gross_Liver",
                            R"***(.*left.*parotid.*|.*right.*parotid.*|.*eyes.*)***",
                            R"***(left_parotid|right_parotid)***" };


    out.emplace_back();
    out.back().name = "DosePerFraction";
    out.back().desc = "The dose delivered per fraction (in Gray).";
                      " If needed, the dose distribution is converted to be biologically-equivalent to"
                      " a 2 Gy/fraction dose distribution.";
    out.back().default_val = "2";
    out.back().expected = true;
    out.back().examples = { "1", "2", "2.33333", "10" };


    out.emplace_back();
    out.back().name = "AlphaBetaRatio";
    out.back().desc = "The ratio alpha/beta (in Gray) to use when converting to a biologically-equivalent"
                      " dose distribution. Default to 10 Gy for early-responding normal tissues and"
                      " tumors, and 3 Gy for late-responding normal tissues.";
    out.back().default_val = "10";
    out.back().expected = true;
    out.back().examples = { "1", "3", "10", "20" };

    
    out.emplace_back();
    out.back().name = "Gamma50";
    out.back().desc = "The unitless 'normalized dose-response gradient' or normalized slope of the logistic"
                      " dose-response model at the half-maximum point (e.g., D_50). Informally,"
                      " this parameter controls the steepness of the dose-response curve. (For more"
                      " specific information, consult a standard reference such as 'Basic Clinical Radiobiology'"
                      " 4th Edition by Joiner et al., sections 5.3-5.5.) This parameter is empirically"
                      " fit and not universal. Late endpoints for normal tissues have gamma_50 around 2-6"
                      " whereas gamma_50 nominally varies around 1.5-2.5 for local control of squamous"
                      " cell carcinomas of the head and neck.";
    out.back().default_val = "2.3";
    out.back().expected = true;
    out.back().examples = { "1.5", "2", "2.5", "6" };

    
    out.emplace_back();
    out.back().name = "Dose50";
    out.back().desc = "The dose (in Gray) needed to achieve 50\% probability of local tumour control according to"
                      " an empirical logistic dose-response model (e.g., D_50). Informally, this"
                      " parameter 'shifts' the model along the dose axis. (For more"
                      " specific information, consult a standard reference such as 'Basic Clinical Radiobiology'"
                      " 4th Edition by Joiner et al., sections 5.1-5.3.) This parameter is empirically"
                      " fit and not universal. In 'Quantifying the position and steepness of radiation "
                      " dose-response curves' by Bentzen and Tucker in 1994, D_50 of around 60-65 Gy are reported"
                      " for local control of head and neck cancers (pyriform sinus carcinoma and neck nodes with"
                      " max diameter <= 3cm). OTOH, Okunieff et al. (doi:10.1016/0360-3016(94)00475-Z) computed"
                      " Dose50 for tumours in human subjects. They found median D_50 of 51.9 Gy for gross disease"
                      " and a median D_50 of 37.9 Gy for microscopic disease. Martel et al. report 84.5 Gy in lung.";
    out.back().default_val = "65";
    out.back().expected = true;
    out.back().examples = { "37.9", "52", "60", "65", "84.5" };

    return out;
}



Drover EvaluateTCPModels(Drover DICOM_data, OperationArgPkg OptArgs, std::map<std::string,std::string> /*InvocationMetadata*/, std::string FilenameLex){

    // This operation evaluates a variety of TCP models for each ROI. Currently the following are implemented:
    //   - The "Martel model"
    //   - ...TODO...
    //
    // Note: this routine uses image_arrays so convert dose_arrays beforehand.
    //
    // Note: this routine will combine spatially-overlapping images by summing voxel intensities. So if you have a time
    //       course it may be more sensible to aggregate images in some way (e.g., spatial averaging) prior to calling
    //       this routine.
    //

    //---------------------------------------------- User Parameters --------------------------------------------------
    auto TCPFileName = OptArgs.getValueStr("TCPFileName").value();
    const auto ROILabelRegex = OptArgs.getValueStr("ROILabelRegex").value();
    const auto NormalizedROILabelRegex = OptArgs.getValueStr("NormalizedROILabelRegex").value();

    const auto DosePerFraction = std::stod( OptArgs.getValueStr("DosePerFraction").value() );
    const auto AlphaBetaRatio = std::stod( OptArgs.getValueStr("AlphaBetaRatio").value() );
    const auto Gamma50 = std::stod( OptArgs.getValueStr("Gamma50").value() );
    const auto Dose50 = std::stod( OptArgs.getValueStr("Dose50").value() );

    //-----------------------------------------------------------------------------------------------------------------
    const auto theregex = std::regex(ROILabelRegex, std::regex::icase | std::regex::nosubs | std::regex::optimize | std::regex::extended);
    const auto thenormalizedregex = std::regex(NormalizedROILabelRegex, std::regex::icase | std::regex::nosubs | std::regex::optimize | std::regex::extended);

    Explicator X(FilenameLex);

    //Merge the image arrays if necessary.
    if(DICOM_data.image_data.empty()){
        throw std::invalid_argument("This routine requires at least one image array. Cannot continue");
    }

    auto img_arr_ptr = DICOM_data.image_data.front();
    if(img_arr_ptr == nullptr){
        throw std::runtime_error("Encountered a nullptr when expecting a valid Image_Array ptr.");
    }else if(img_arr_ptr->imagecoll.images.empty()){
        throw std::runtime_error("Encountered a Image_Array with valid images -- no images found.");
    }

    //Stuff references to all contours into a list. Remember that you can still address specific contours through
    // the original holding containers (which are not modified here).
    std::list<std::reference_wrapper<contour_collection<double>>> cc_all;
    for(auto & cc : DICOM_data.contour_data->ccs){
        auto base_ptr = reinterpret_cast<contour_collection<double> *>(&cc);
        cc_all.push_back( std::ref(*base_ptr) );
    }

    //Whitelist contours using the provided regex.
    auto cc_ROIs = cc_all;
    cc_ROIs.remove_if([=](std::reference_wrapper<contour_collection<double>> cc) -> bool {
                   const auto ROINameOpt = cc.get().contours.front().GetMetadataValueAs<std::string>("ROIName");
                   const auto ROIName = ROINameOpt.value();
                   return !(std::regex_match(ROIName,theregex));
    });
    cc_ROIs.remove_if([=](std::reference_wrapper<contour_collection<double>> cc) -> bool {
                   const auto ROINameOpt = cc.get().contours.front().GetMetadataValueAs<std::string>("NormalizedROIName");
                   const auto ROIName = ROINameOpt.value();
                   return !(std::regex_match(ROIName,thenormalizedregex));
    });

    if(cc_ROIs.empty()){
        throw std::invalid_argument("No contours selected. Cannot continue.");
    }

    std::string patient_ID;
    if( auto o = cc_ROIs.front().get().contours.front().GetMetadataValueAs<std::string>("PatientID") ){
        patient_ID = o.value();
    }else if( auto o = cc_ROIs.front().get().contours.front().GetMetadataValueAs<std::string>("StudyInstanceUID") ){
        patient_ID = o.value();
    }else{
        patient_ID = "unknown_patient";
    }

    //Accumulate the voxel intensity distributions.
    AccumulatePixelDistributionsUserData ud;
    if(!img_arr_ptr->imagecoll.Compute_Images( AccumulatePixelDistributions, { },
                                               cc_ROIs, &ud )){
        throw std::runtime_error("Unable to accumulate pixel distributions.");
    }

    //Evalute the models.
    std::map<std::string, double> MartelModel;
    {
        // NOTE: the following are (supposedly) valid for lung!
        //const long double D_50 = 84.5; // (Gy). The dose needed to achieve 50% TCP.
        //const long double gamma = 1.5; // (unitless). The normalized slope of the dose-response sigmoid at D_50
        //                               //             giving progression-free survival at 30mo post-RT.

        for(const auto &av : ud.accumulated_voxels){
            const auto lROIname = av.first;

            const long double V_frac = static_cast<long double>(1) / av.second.size(); // Fractional volume of a single voxel compared to whole ROI.

            double TCP_Martel = static_cast<long double>(1);
            for(const auto &D_voxel : av.second){
                //Convert dose to BED or EQD2.
                // ... TODO ...
                const long double BED = D_voxel;

                // Martel model.
                const long double numer = std::pow(BED, Gamma50*4);
                const long double denom = std::pow(Dose50, Gamma50*4) + numer;
                const long double TCP_voxel = numer/denom; // This is a sigmoid curve.
                TCP_Martel *= std::pow(TCP_voxel, V_frac);

                // ... other models ...
                // ...
            }
            MartelModel[lROIname] = TCP_Martel;
        }
    }


    //Report the findings. 
    FUNCINFO("Attempting to claim a mutex");
    try{
        //File-based locking is used so this program can be run over many patients concurrently.
        //
        //Try open a named mutex. Probably created in /dev/shm/ if you need to clear it manually...
        boost::interprocess::named_mutex mutex(boost::interprocess::open_or_create,
                                               "dicomautomaton_operation_evaluatetcp_mutex");
        boost::interprocess::scoped_lock<boost::interprocess::named_mutex> lock(mutex);

        if(TCPFileName.empty()){
            TCPFileName = Get_Unique_Sequential_Filename("/tmp/dicomautomaton_evaluatetcp_", 6, ".csv");
        }
        std::fstream FO_tcp(TCPFileName, std::fstream::out | std::fstream::app);
        if(!FO_tcp){
            throw std::runtime_error("Unable to open file for reporting derivative data. Cannot continue.");
        }
        for(const auto &av : ud.accumulated_voxels){
            const auto lROIname = av.first;
            const auto DoseMean = Stats::Mean( av.second );
            const auto DoseMedian = Stats::Median( av.second );
            const auto DoseStdDev = std::sqrt(Stats::Unbiased_Var_Est( av.second ));
            const auto TCPMartel = MartelModel[lROIname];

            FO_tcp  << "PatientID='" << patient_ID << "',"
                    //<< "NormalizedROIname='" << X(lROIname) << "',"
                    << "ROIname='" << lROIname << "',"
                    << "TCPMartelModel=" << TCPMartel*100.0 << ","
                    << "DoseMean=" << DoseMean << ","
                    << "DoseMedian=" << DoseMedian << ","
                    << "DoseStdDev=" << DoseStdDev << ","
                    << "VoxelCount=" << av.second.size() << std::endl;
        }
        FO_tcp.flush();
        FO_tcp.close();

    }catch(const std::exception &e){
        FUNCERR("Unable to write to output TCP file: '" << e.what() << "'");
    }

    return std::move(DICOM_data);
}
